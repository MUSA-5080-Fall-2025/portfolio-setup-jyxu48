---
title: "week5 class"
format: html
---
```{r}
library(tidyverse)
library(dplyr)
library(knitr)
library(tidycensus)
census_api_key("fef2af5588030f3fd4b474bd111e0d63a7ec2837")
challenge_data <- get_acs(
  geography = "county",
  state = "PA",
  variables = c(
    home_value = "B25077_001",      # YOUR TARGET
    total_pop = "B01003_001",       # Total population
    median_income = "B19013_001",   # Median household income
    median_age = "B01002_001",      # Median age
    percent_college = "B15003_022", # Bachelor's degree or higher
    median_rent = "B25058_001",     # Median rent
    poverty_rate = "B17001_002"     # Population in poverty
  ),
  year = 2022,
  output = "wide"
)
```
```{r}
# 加载必要包
library(dplyr)
library(ggplot2)
library(tidyr)

# 假设你的数据框名是 df
# 并且已经包含以下变量：
# B25077_001 (home_value)
# B01003_001 (total_pop)
# B19013_001 (median_income)
# B01002_001 (median_age)
# B15003_022 (percent_college)
# B25058_001 (median_rent)
# B17001_002 (poverty_rate)

# Step 2: 数据整理为长格式，方便 facet 绘图
df_long <- challenge_data


# Step 3: 绘图
library(ggplot2)
library(patchwork)  # 用来把多个图拼在一起（非常方便）
library(dplyr)

# 单独绘制每个散点 + 拟合线
p1 <- ggplot(challenge_data, aes(x = total_popE, y = home_valueE)) +
  geom_point(alpha = 0.6, color = "steelblue") +
  geom_smooth(method = "lm", se = FALSE, color = "darkred") +
  labs(x = "Total Population", y = "Home Value")

p2 <- ggplot(challenge_data, aes(x = median_incomeE, y = home_valueE)) +
  geom_point(alpha = 0.6, color = "steelblue") +
  geom_smooth(method = "lm", se = FALSE, color = "darkred") +
  labs(x = "Median Income", y = "Home Value")

p3 <- ggplot(challenge_data, aes(x = median_ageE, y = home_valueE)) +
  geom_point(alpha = 0.6, color = "steelblue") +
  geom_smooth(method = "lm", se = FALSE, color = "darkred") +
  labs(x = "Median Age", y = "Home Value")

p4 <- ggplot(challenge_data, aes(x = percent_collegeE, y = home_valueE)) +
  geom_point(alpha = 0.6, color = "steelblue") +
  geom_smooth(method = "lm", se = FALSE, color = "darkred") +
  labs(x = "% College Graduates", y = "Home Value")

p5 <- ggplot(challenge_data, aes(x = median_rentE, y = home_valueE)) +
  geom_point(alpha = 0.6, color = "steelblue") +
  geom_smooth(method = "lm", se = FALSE, color = "darkred") +
  labs(x = "Median Rent", y = "Home Value")

p6 <- ggplot(challenge_data, aes(x = poverty_rateE, y = home_valueE)) +
  geom_point(alpha = 0.6, color = "steelblue") +
  geom_smooth(method = "lm", se = FALSE, color = "darkred") +
  labs(x = "Poverty Rate", y = "Home Value")

# 使用 patchwork 拼接
(p1 | p2 | p3) /
(p4 | p5 | p6) +
  plot_annotation(
    title = "Relationships Between Predictors and Median Home Value (PA Counties)",
    subtitle = "Linear trends shown in red",
    theme = theme(plot.title = element_text(size = 14, face = "bold"))
  )


```

```{r}
df_long <- df_long %>%
  mutate(
    log_p = log(total_popE),
    log_c = log(percent_collegeE),
    log_po = log(poverty_rateE)
  )

p7 <- ggplot(df_long, aes(x = log_p, y = home_valueE)) +
  geom_point(alpha = 0.6, color = "steelblue") +
  geom_smooth(method = "lm", se = FALSE, color = "darkred") +
  labs(x = "log_p", y = "Home Value")

p8 <- ggplot(df_long, aes(x = log_c, y = home_valueE)) +
  geom_point(alpha = 0.6, color = "steelblue") +
  geom_smooth(method = "lm", se = FALSE, color = "darkred") +
  labs(x = "log_c", y = "Home Value")

p9 <- ggplot(df_long, aes(x = log_po, y = home_valueE)) +
  geom_point(alpha = 0.6, color = "steelblue") +
  geom_smooth(method = "lm", se = FALSE, color = "darkred") +
  labs(x = "log_po", y = "Home Value")

(p7 | p8 | p9) +
  plot_annotation(
    title = "Two Predictors vs Home Value",
    subtitle = "Linear trends shown in red",
    theme = theme(plot.title = element_text(size = 14, face = "bold"))
  )


```
```{r}
install.packages("tidymodels")  # 第一次安装
library(tidymodels)             # 安装后加载
install.packages("lmtest") 
library(lmtest)
install.packages("sandwich")

```

```{r}
library(tidymodels)
library(lmtest)
library(car)
library(sandwich)
library(broom)
library(ggplot2)

set.seed(42)

```
```{r}
library(tidymodels)

# ---- 数据准备 ----
df <- df_long %>%
  select(home_valueE, log_p, log_c, log_po, median_incomeE, median_rentE) %>%
  drop_na()

# ---- 定义 recipe ----
rec <- recipe(home_valueE ~ log_p + log_c + log_po + median_incomeE + median_rentE, data = df) %>%
  step_log(home_valueE, base = exp(1)) %>%   # 在 recipe 中做 log 转换
  step_normalize(all_predictors())

# ---- 模型 ----
mod_lm <- linear_reg() %>% set_engine("lm")

wf <- workflow() %>%
  add_recipe(rec) %>%
  add_model(mod_lm)

# ---- 10-fold CV ----
set.seed(42)
folds <- vfold_cv(df, v = 10, strata = home_valueE)

res <- fit_resamples(
  wf,
  resamples = folds,
  metrics = metric_set(rmse),
  control = control_resamples(save_pred = TRUE)
)

collect_metrics(res)

```
```{r}
log_rmse <- 0.144
rel_err  <- exp(log_rmse) - 1
avg_home <- mean(df$home_valueE, na.rm = TRUE)

cat("平均房价: $", round(avg_home))
cat("\n相对误差:", round(rel_err * 100, 1), "%")
cat("\n美元尺度下RMSE约:", round(avg_home * rel_err, 0))

```


