car_data<- rename(car_data, year = `Year of manufacture`) %>% filter(year > 2000)
car_data<- rename(car_data, year = `Year of manufacture`) %>% filter(year > 2000)
library(dplyr)
car_data<- rename(car_data, year = `Year of manufacture`) %>% filter(year > 2000)
#load library
library(tidyverse)
library(dplyr)
car_data <- read_csv("data/car_sales_data.csv") # reads in as tibble. vs read.csv which reads in as a data frame
library(tidycensus)
library(tidyverse)
library(knitr)
library(tidycensus)
library(tidyverse)
library(knitr)
library(tidycensus)
library(tidyverse)
library(knitr)
library(tidyverse)
library(dplyr)
library(knitr)
# Load required packages (hint: you need tidycensus, tidyverse, and knitr)
library(tidyverse)
library(dplyr)
library(knitr)
# Set your Census API key
fef2af5588030f3fd4b474bd111e0d63a7ec2837
# Load required packages (hint: you need tidycensus, tidyverse, and knitr)
library(tidyverse)
library(dplyr)
library(knitr)
# Set your Census API key
census_api_key("fef2af5588030f3fd4b474bd111e0d63a7ec2837")
# Choose your state for analysis - assign it to a variable called my_state
my_state <- "MN"
**State Selection:** I have chosen **[Minnesota]** for this analysis because: [Brief explanation of why you chose this state]
# Load required packages (hint: you need tidycensus, tidyverse, and knitr)
library(tidyverse)
# Load required packages (hint: you need tidycensus, tidyverse, and knitr)
library(tidyverse)
library(dplyr)
library(knitr)
# Set your Census API key
census_api_key("fef2af5588030f3fd4b474bd111e0d63a7ec2837")
# Choose your state for analysis - assign it to a variable called my_state
my_state <- "MN"
**State Selection:** I have chosen **[Minnesota]** for this analysis because: [Brief explanation of why you chose this state]
# Load required packages (hint: you need tidycensus, tidyverse, and knitr)
library(tidyverse)
library(dplyr)
library(knitr)
# Set your Census API key
census_api_key("fef2af5588030f3fd4b474bd111e0d63a7ec2837")
# Choose your state for analysis - assign it to a variable called my_state
my_state <- "MN"
**State Selection:** I have chosen **[Minnesota]** for this analysis because: [Brief explanation of why you chose this state]
# Load required packages (hint: you need tidycensus, tidyverse, and knitr)
library(tidyverse)
library(dplyr)
library(knitr)
# Set your Census API key
census_api_key("fef2af5588030f3fd4b474bd111e0d63a7ec2837")
# Choose your state for analysis - assign it to a variable called my_state
my_state <- "MN"
##**State Selection:** I have chosen **[Minnesota]** for this analysis because: [Brief explanation of why you chose this state]
# Part 2: County-Level Resource Assessment
## 2.1 Data Retrieval
**Your Task:** Use `get_acs()` to retrieve county-level data for your chosen state.
# Load required packages (hint: you need tidycensus, tidyverse, and knitr)
library(tidyverse)
library(dplyr)
library(knitr)
# Set your Census API key
census_api_key("fef2af5588030f3fd4b474bd111e0d63a7ec2837")
# Choose your state for analysis - assign it to a variable called my_state
my_state <- "MN"
**State Selection:** I have chosen **[Minnesota]** for this analysis because: [Brief explanation of why you chose this state]
total_pop <- get_acs(
geography = "county",
variables = "B01003_001",  # Total population
year = 2022,
survey = "acs5"
)
median_household_income <- get_acs(
geography = "county",
variables = "B19013_001",  # Total population
year = 2022,
survey = "acs5"
)
county_data <- get_acs(
geography = "county",
state = my_state,
county = my_county,
variables = c(
median_income = "B19013_001",   # Median Household Income
total_population = "B01003_001" # Total Population
),
year = 2022,
survey = "acs5",
output = "wide"
)
my_state  <- "MN"
my_county <- "Hennepin"
county_data <- get_acs(
geography = "county",
state = my_state,
county = my_county,
variables = c(
median_income = "B19013_001",   # Median Household Income
total_population = "B01003_001" # Total Population
),
year = 2022,
survey = "acs5",
output = "wide"
)
county_data
county_data_clean <- county_data %>%
mutate(
NAME = str_remove(NAME, ",.*"),         # remove state name after the comma
NAME = str_remove(NAME, " County$")     # remove trailing "County"
)
head(county_data_clean)
county_data <- get_acs(
geography = "county",
state = my_state,
variables = c(
median_income = "B19013_001",   # Median Household Income
total_population = "B01003_001" # Total Population
),
year = 2022,
survey = "acs5",
output = "wide"
)
county_data
# Clean the county names to remove state name and "County"
# Hint: use mutate() with str_remove()
county_data_clean <- county_data %>%
mutate(
NAME = str_remove(NAME, ",.*"),         # remove state name after the comma
NAME = str_remove(NAME, " County$")     # remove trailing "County"
)
# Display the first few rows
head(county_data_clean)
# Calculate MOE percentage and reliability categories using mutate()
mutate(county_data_clean, MOE = median_incomeM / median_incomeE)
# Create a summary showing count of counties in each reliability category
# Hint: use count() and mutate() to add percentages
# Calculate MOE percentage and reliability categories using mutate()
mutate(county_data_clean, MOE = (median_incomeM / median_incomeE)*100)
# Create a summary showing count of counties in each reliability category
# Hint: use count() and mutate() to add percentages
# Create reliability categories
reliability = case_when(
MOE < 5 ~ "High Confidence",
MOE >= 5 & MOE <= 10 ~ "Moderate Confidence",
MOE > 10 ~ "Low Confidence"
),
# Create reliability categories
reliability = case_when(
MOE < 5 ~ "High Confidence",
MOE >= 5 & MOE <= 10 ~ "Moderate Confidence",
MOE > 10 ~ "Low Confidence"
),
# Create reliability categories
reliability = case_when(
MOE < 5 ~ "High Confidence",
MOE >= 5 & MOE <= 10 ~ "Moderate Confidence",
MOE > 10 ~ "Low Confidence"
),
# Create reliability categories
reliability = case_when(
MOE < 5 ~ "High Confidence",
MOE >= 5 & MOE <= 10 ~ "Moderate Confidence",
MOE > 10 ~ "Low Confidence",
),
# Create reliability categories
reliability = case_when(
MOE < 5 ~ "High Confidence",
MOE >= 5 & MOE <= 10 ~ "Moderate Confidence",
MOE > 10 ~ "Low Confidence"
),
# Create reliability categories
reliability = case_when(
MOE < 5 ~ "High Confidence",
MOE >= 5 & MOE <= 10 ~ "Moderate Confidence",
MOE > 10 ~ "Low Confidence"
),
# Create reliability categories
reliability = case_when(
MOE < 5 ~ "High Confidence",
MOE >= 5 & MOE <= 10 ~ "Moderate Confidence",
MOE > 10 ~ "Low Confidence"
),
# Create reliability categories
reliability = case_when(
MOE < 5 ~ "High Confidence",
MOE >= 5 & MOE <= 10 ~ "Moderate Confidence",
MOE > 10 ~ "Low Confidence"
),
# Create reliability categories
# Calculate MOE percentage and reliability categories using mutate()
mutate(county_data_clean, MOE = (median_incomeM / median_incomeE)*100)
mutate(
county_data_clean = case_when(
MOE < 5 ~ "High Confidence",
MOE >= 5 & MOE <= 10 ~ "Moderate Confidence",
MOE > 10 ~ "Low Confidence"
)
）
# Create reliability categories
# Calculate MOE percentage and reliability categories using mutate()
mutate(county_data_clean, MOE = (median_incomeM / median_incomeE)*100)
mutate(
county_data_clean = case_when(
MOE < 5 ~ "High Confidence",
MOE >= 5 & MOE <= 10 ~ "Moderate Confidence",
MOE > 10 ~ "Low Confidence"
)
）
# Create reliability categories
# Calculate MOE percentage and reliability categories using mutate()
mutate(county_data_clean, MOE = (median_incomeM / median_incomeE)*100)
mutate(
county_data_clean = case_when(
MOE < 5 ~ "High Confidence",
MOE >= 5 & MOE <= 10 ~ "Moderate Confidence",
MOE > 10 ~ "Low Confidence"
)
）
# Create reliability categories
# Calculate MOE percentage and reliability categories using mutate()
mutate(county_data_clean, MOE = (median_incomeM / median_incomeE)*100)
mutate(
county_data_clean = case_when(
MOE < 5 ~ "High Confidence",
MOE >= 5 & MOE <= 10 ~ "Moderate Confidence",
MOE > 10 ~ "Low Confidence"
)
）
# Create reliability categories
# Calculate MOE percentage and reliability categories using mutate()
mutate(county_data_clean, MOE = (median_incomeM / median_incomeE)*100)
mutate(
county_data_clean = case_when(
MOE < 5 ~ "High Confidence",
MOE >= 5 & MOE <= 10 ~ "Moderate Confidence",
MOE > 10 ~ "Low Confidence"
)
)
# Create reliability categories
# Calculate MOE percentage and reliability categories using mutate()
mutate(county_data_clean, MOE = (median_incomeM / median_incomeE)*100)
mutate(
county_data_clean = case_when(
MOE < 5 ~ "High Confidence",
MOE >= 5 & MOE <= 10 ~ "Moderate Confidence",
MOE > 10 ~ "Low Confidence"
)
)
mutate(county_data_clean, MOE = (median_incomeM / median_incomeE)*100)
mutate(
county_data_clean = case_when(
MOE < 5 ~ "High Confidence",
MOE >= 5 & MOE <= 10 ~ "Moderate Confidence",
MOE > 10 ~ "Low Confidence"
)
)
# Create reliability categories
# Calculate MOE percentage and reliability categories using mutate()
mutate(county_data_clean, MOE = (median_incomeM / median_incomeE)*100)
mutate(
reliability = case_when(
MOE < 5 ~ "High Confidence",
MOE >= 5 & MOE <= 10 ~ "Moderate Confidence",
MOE > 10 ~ "Low Confidence"
)
)
# Create reliability categories
# Calculate MOE percentage and reliability categories using mutate()
mutate(county_data_clean, MOE = (median_incomeM / median_incomeE)*100) %>%
mutate(
reliability = case_when(
MOE < 5 ~ "High Confidence",
MOE >= 5 & MOE <= 10 ~ "Moderate Confidence",
MOE > 10 ~ "Low Confidence"
)
)
mutate(unreliable_flag = MOE > 10)
# Create reliability categories
# Calculate MOE percentage and reliability categories using mutate()
mutate(county_data_clean, MOE = (median_incomeM / median_incomeE)*100) %>%
mutate(
reliability = case_when(
MOE < 5 ~ "High Confidence",
MOE >= 5 & MOE <= 10 ~ "Moderate Confidence",
MOE > 10 ~ "Low Confidence"
)
) %>%
mutate(unreliable_flag = MOE > 10)
# Create a summary showing count of counties in each reliability category
reliability_summary <- county_data_clean %>%
count(reliability) %>%
mutate(percentage = (n / sum(n)) * 100)
# Create reliability categories
# Calculate MOE percentage and reliability categories using mutate()
mutate(county_data_clean, MOE = (median_incomeM / median_incomeE)*100) %>%
mutate(
reliability = case_when(
MOE < 5 ~ "High Confidence",
MOE >= 5 & MOE <= 10 ~ "Moderate Confidence",
MOE > 10 ~ "Low Confidence"
)
) %>%
mutate(unreliable_flag = MOE > 10) %>%
# Create a summary showing count of counties in each reliability category
reliability_summary <- county_data_clean %>%
count(reliability) %>%
mutate(percentage = (n / sum(n)) * 100)
# Create reliability categories
# Calculate MOE percentage and reliability categories using mutate()
mutate(county_data_clean, MOE = (median_incomeM / median_incomeE)*100) %>%
mutate(
reliability = case_when(
MOE < 5 ~ "High Confidence",
MOE >= 5 & MOE <= 10 ~ "Moderate Confidence",
MOE > 10 ~ "Low Confidence"
)
) %>%
mutate(unreliable_flag = MOE > 10) %>%
# Create a summary showing count of counties in each reliability category
reliability_summary <- county_data_clean %>%
count(reliability) %>%
mutate(percentage = (n / sum(n)) * 100)
# Create reliability categories
# Calculate MOE percentage and reliability categories using mutate()
mutate(county_data_clean, MOE = (median_incomeM / median_incomeE)*100) %>%
mutate(
reliability = case_when(
MOE < 5 ~ "High Confidence",
MOE >= 5 & MOE <= 10 ~ "Moderate Confidence",
MOE > 10 ~ "Low Confidence"
)
) %>%
mutate(unreliable_flag = MOE > 10)
# Create a summary showing count of counties in each reliability category
reliability_summary <- county_data_clean %>%
count(reliability) %>%
mutate(percentage = (n / sum(n)) * 100)
# Create reliability categories
# Calculate MOE percentage and reliability categories using mutate()
mutate(county_data_clean, MOE = (median_incomeM / median_incomeE)*100) %>%
mutate(
reliability = case_when(
MOE < 5 ~ "High Confidence",
MOE >= 5 & MOE <= 10 ~ "Moderate Confidence",
MOE > 10 ~ "Low Confidence"
)
) %>%
mutate(unreliable_flag = MOE > 10)
# Create a summary showing count of counties in each reliability category
reliability_summary <- county_data_clean %>%
count(reliability) %>%
mutate(percentage = (n / sum(n)) * 100)
# Create reliability categories
# Calculate MOE percentage and reliability categories using mutate()
mutate(county_data_clean, MOE = (median_incomeM / median_incomeE)*100) %>%
county_data_clean <- county_data_clean %>%
mutate(reliability = case_when(
MOE < 5 ~ "High Confidence",
MOE >= 5 & MOE <= 10 ~ "Moderate Confidence",
MOE > 10 ~ "Low Confidence"
))
# Create reliability categories
# Calculate MOE percentage and reliability categories using mutate()
mutate(county_data_clean, MOE = (median_incomeM / median_incomeE)*100) %>%
county_data_clean <- county_data_clean %>%
mutate(reliability = case_when(
MOE < 5 ~ "High Confidence",
MOE >= 5 & MOE <= 10 ~ "Moderate Confidence",
MOE > 10 ~ "Low Confidence"
))
# Create reliability categories
# Calculate MOE percentage and reliability categories using mutate()
mutate(county_data_clean, MOE = (median_incomeM / median_incomeE)*100) %>%
county_data_clean <- county_data_clean %>%
mutate(reliability = case_when(
MOE < 5 ~ "High Confidence",
MOE >= 5 & MOE <= 10 ~ "Moderate Confidence",
MOE > 10 ~ "Low Confidence"
))
# Create reliability categories
# Calculate MOE percentage and reliability categories using mutate()
county_data_clean <- county_data_clean %>%
mutate(MOE = (median_incomeM / median_incomeE) * 100)
county_data_clean <- county_data_clean %>%
mutate(reliability = case_when(
MOE < 5 ~ "High Confidence",
MOE >= 5 & MOE <= 10 ~ "Moderate Confidence",
MOE > 10 ~ "Low Confidence"
))
mutate(unreliable_flag = MOE > 10)
# Create reliability categories
# Calculate MOE percentage and reliability categories using mutate()
county_data_clean <- county_data_clean %>%
mutate(MOE = (median_incomeM / median_incomeE) * 100)
county_data_clean <- county_data_clean %>%
mutate(reliability = case_when(
MOE < 5 ~ "High Confidence",
MOE >= 5 & MOE <= 10 ~ "Moderate Confidence",
MOE > 10 ~ "Low Confidence"
))
county_data_clean <- county_data_clean %>%
mutate(unreliable_flag = MOE > 10)
# Create a summary showing count of counties in each reliability category
reliability_summary <- county_data_clean %>%
count(reliability) %>%
mutate(percentage = (n / sum(n)) * 100)
reliability_summary
# Hint: use count() and mutate() to add percentages
