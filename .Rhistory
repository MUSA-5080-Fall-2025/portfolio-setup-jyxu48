ward_price <- opa_census %>%
st_drop_geometry() %>%
mutate(geographic_ward = as.character(geographic_ward)) %>%
group_by(geographic_ward) %>%
summarise(median_price = median(sale_price, na.rm = TRUE))
ward_boundaries <- st_read("C:/Users/12345/Documents/GitHub/PPA_midterm/Political_Wards.geojson") %>%
st_transform(2272) %>%
mutate(
geographic_ward = as.character(ward_num)
)
ward_price <- opa_census %>%
st_drop_geometry() %>%
mutate(geographic_ward = as.character(geographic_ward)) %>%
group_by(geographic_ward) %>%
summarise(median_price = median(sale_price, na.rm = TRUE))
ward_boundaries <- st_read("C:/Users/12345/Documents/GitHub/PPA_midterm/Political_Wards.geojson") %>%
st_transform(2272) %>%
mutate(
geographic_ward = as.character(ward_num)
)
ward_price <- opa_census %>%
st_drop_geometry() %>%
mutate(geographic_ward = as.character(geographic_ward.y)) %>%
group_by(geographic_ward) %>%
summarise(median_price = median(sale_price, na.rm = TRUE))
ward_sf <- ward_boundaries %>%
left_join(ward_price, by = "geographic_ward")
ggplot(ward_sf) +
geom_sf(aes(fill = median_price), color = "white", size = 0.2) +
scale_fill_viridis_c(option = "plasma", labels = scales::dollar) +
labs(
title = "Median Residential Sale Price by Ward (2023–2024)",
subtitle = "Philadelphia, PA",
caption = "Data: OPA Property Sales 2023–2024"
) +
coord_sf(datum = NA) +
theme_minimal(base_size = 14) +
theme(
axis.text = element_blank(),
axis.ticks = element_blank(),
panel.grid = element_blank()
)
ward_boundaries <- st_transform(ward_boundaries, st_crs(opa_census))
opa_census <- st_join(opa_census, ward_boundaries %>% dplyr::select(geographic_ward), left = TRUE)
model4 <- lm(log(sale_price) ~ log(total_livable_area)  +
number_of_bathrooms + house_age +
log(median_income) + ba_rate + crime_count +
transit_count + nearest_hospital_m + factor(geographic_ward.y...42),
data = opa_census)
ward_boundaries <- st_transform(ward_boundaries, st_crs(opa_census))
opa_census <- st_join(opa_census, ward_boundaries %>% dplyr::select(geographic_ward), left = TRUE)
model4 <- lm(log(sale_price) ~ log(total_livable_area)  +
number_of_bathrooms + house_age +
log(median_income) + ba_rate + crime_count +
transit_count + nearest_hospital_m + factor(geographic_ward),
data = opa_census)
ward_boundaries <- st_transform(ward_boundaries, st_crs(opa_census))
opa_census <- st_join(opa_census, ward_boundaries %>% dplyr::select(geographic_ward), left = TRUE)
model4 <- lm(log(sale_price) ~ log(total_livable_area)  +
number_of_bathrooms + house_age +
log(median_income) + ba_rate + crime_count +
transit_count + nearest_hospital_m + factor(geographic_ward.y...42),
data = opa_census)
summary(model4)
ward_boundaries <- st_transform(ward_boundaries, st_crs(opa_census))
opa_census <- st_join(opa_census, ward_boundaries %>% dplyr::select(geographic_ward), left = TRUE)
model4 <- lm(log(sale_price) ~ log(total_livable_area)  +
number_of_bathrooms + house_age +
log(median_income) + ba_rate + crime_count +
transit_count + nearest_hospital_m + factor(geographic_ward.y...42),
data = opa_census)
summary(model4)
model3 <- lm(log(sale_price) ~ total_livable_area + number_of_bedrooms +
number_of_bathrooms + house_age +
median_income + ba_rate + crime_count +
transit_count + recreation_count + nearest_hospital_m,
data = opa_census)
summary(model3)
ward_boundaries <- st_transform(ward_boundaries, st_crs(opa_census))
opa_census <- st_join(opa_census, ward_boundaries %>% dplyr::select(geographic_ward), left = TRUE)
model4 <- lm(log(sale_price) ~ log(total_livable_area)  +
number_of_bathrooms + house_age +
log(median_income) + ba_rate + crime_count +
transit_count  + factor(geographic_ward.y...42),
data = opa_census)
summary(model4)
ward_boundaries <- st_transform(ward_boundaries, st_crs(opa_census))
opa_census <- st_join(opa_census, ward_boundaries %>% dplyr::select(geographic_ward), left = TRUE)
model4 <- lm(log(sale_price) ~ log(total_livable_area)  +
number_of_bathrooms + house_age +
log(median_income) + ba_rate + crime_count +
transit_count + nearest_hospital_m + factor(geographic_ward.y...42),
data = opa_census)
summary(model4)
opa_selected <- opa_selected %>%
filter(
category_code==1
)
opa_clean <- opa_selected %>%
filter(
category_code==1
)
View(opa_clean)
opa_clean <- opa_clean %>%
filter(
category_code==1
)
# Select relevant variables
opa_selected <- opa_clean %>%
dplyr::select(
sale_date, sale_price, market_value, building_code_description,
total_livable_area, number_of_bedrooms, number_of_bathrooms,
number_stories, garage_spaces, central_air, quality_grade,
interior_condition, exterior_condition, year_built,
zip_code, geographic_ward, census_tract, zoning, owner_1,
category_code_description, shape
) %>%
filter(category_code_description == "SINGLE FAMILY") %>%
distinct() %>%
filter(
!is.na(sale_price) & sale_price > 2000 & sale_price < 1e8,
!is.na(total_livable_area) & total_livable_area > 0
# !is.na(year_built) & year_built > 1800 & year_built <= 2025
)
# Select relevant variables
opa_selected <- opa_clean %>%
dplyr::select(
sale_date, sale_price, market_value, building_code_description,
total_livable_area, number_of_bedrooms, number_of_bathrooms,
number_stories, garage_spaces, central_air, quality_grade,
interior_condition, exterior_condition, year_built,
zip_code, geographic_ward, census_tract, zoning, owner_1,
category_code_description, shape
) %>%
filter(category_code_description == "SINGLE FAMILY") %>%
distinct() %>%
filter(
!is.na(sale_price) & sale_price > 2000 & sale_price < 1e8,
!is.na(total_livable_area) & total_livable_area > 0,
!is.na(year_built) & year_built > 1800 & year_built <= 2025
)
# Select relevant variables
opa_selected <- opa_clean %>%
dplyr::select(
sale_date, sale_price, market_value, building_code_description,
total_livable_area, number_of_bedrooms, number_of_bathrooms,
number_stories, garage_spaces, central_air, quality_grade,
interior_condition, exterior_condition, year_built,
zip_code, geographic_ward, census_tract, zoning, owner_1,
category_code_description, shape
) %>%
filter(category_code_description == "SINGLE FAMILY") %>%
distinct() %>%
filter(
!is.na(sale_price) & sale_price > 2000 & sale_price < 1e8,
# !is.na(total_livable_area) & total_livable_area > 0,
!is.na(year_built) & year_built > 1800 & year_built <= 2025
)
# Select relevant variables
opa_selected <- opa_clean %>%
dplyr::select(
sale_date, sale_price, market_value, building_code_description,
total_livable_area, number_of_bedrooms, number_of_bathrooms,
number_stories, garage_spaces, central_air, quality_grade,
interior_condition, exterior_condition, year_built,
zip_code, geographic_ward, census_tract, zoning, owner_1,
category_code_description, shape
) %>%
filter(category_code_description == "SINGLE FAMILY") %>%
distinct() %>%
filter(
# !is.na(sale_price) & sale_price > 2000 & sale_price < 1e8,
!is.na(total_livable_area) & total_livable_area > 0,
!is.na(year_built) & year_built > 1800 & year_built <= 2025
)
# Select relevant variables
opa_selected <- opa_clean %>%
dplyr::select(
sale_date, sale_price, market_value, building_code_description,
total_livable_area, number_of_bedrooms, number_of_bathrooms,
number_stories, garage_spaces, central_air, quality_grade,
interior_condition, exterior_condition, year_built,
zip_code, geographic_ward, census_tract, zoning, owner_1,
category_code_description, shape
) %>%
filter(category_code_description == "SINGLE FAMILY") %>%
distinct() %>%
filter(
!is.na(sale_price) & sale_price > 2000 & sale_price < 1e8,
!is.na(total_livable_area) & total_livable_area > 0,
!is.na(year_built) & year_built > 1800 & year_built <= 2025
)
# Select relevant variables
opa_selected <- opa_clean %>%
dplyr::select(
sale_date, sale_price, market_value, building_code_description,
total_livable_area, number_of_bedrooms, number_of_bathrooms,
number_stories, garage_spaces, central_air, quality_grade,
interior_condition, exterior_condition, year_built,
zip_code, geographic_ward, census_tract, zoning, owner_1,
category_code_description, shape
) %>%
filter(category_code_description == "SINGLE FAMILY") %>%
distinct() %>%
filter(
!is.na(sale_price) & sale_price > 2000 & sale_price < 1e9,
!is.na(total_livable_area) & total_livable_area > 0,
!is.na(year_built) & year_built > 1800 & year_built <= 2025
)
# Select relevant variables
opa_selected <- opa_clean %>%
dplyr::select(
sale_date, sale_price, market_value, building_code_description,
total_livable_area, number_of_bedrooms, number_of_bathrooms,
number_stories, garage_spaces, central_air, quality_grade,
interior_condition, exterior_condition, year_built,
zip_code, geographic_ward, census_tract, zoning, owner_1,
category_code_description, shape
) %>%
filter(category_code_description == "SINGLE FAMILY") %>%
distinct() %>%
filter(
!is.na(sale_price) & sale_price > 2000 & sale_price < 1e9,
!is.na(total_livable_area) & total_livable_area > 0,
!is.na(year_built) & year_built > 1800 & year_built <= 2025
)
# Select relevant variables
opa_selected <- opa_clean %>%
dplyr::select(
sale_date, sale_price, market_value, building_code_description,
total_livable_area, number_of_bedrooms, number_of_bathrooms,
number_stories, garage_spaces, central_air, quality_grade,
interior_condition, exterior_condition, year_built,
zip_code, geographic_ward, census_tract, zoning, owner_1,
category_code_description, shape
) %>%
filter(category_code_description == "SINGLE FAMILY") %>%
distinct() %>%
filter(
!is.na(sale_price) & sale_price > 2000 & sale_price < 1e10,
!is.na(total_livable_area) & total_livable_area > 0,
!is.na(year_built) & year_built > 1800 & year_built <= 2025
)
# Select relevant variables
opa_selected <- opa_clean %>%
dplyr::select(
sale_date, sale_price, market_value, building_code_description,
total_livable_area, number_of_bedrooms, number_of_bathrooms,
number_stories, garage_spaces, central_air, quality_grade,
interior_condition, exterior_condition, year_built,
zip_code, geographic_ward, census_tract, zoning, owner_1,
category_code_description, shape
) %>%
filter(category_code_description == "SINGLE FAMILY") %>%
distinct() %>%
filter(
!is.na(sale_price) & sale_price > 2000 & sale_price < 1e8,
!is.na(total_livable_area) & total_livable_area > 0,
!is.na(year_built) & year_built > 1800 & year_built <= 2025
)
hp_clean <- hp %>%
filter(sale_price > 2000, non_market == 0, high_deviation == 0)
hp_non_market <- hp %>%
filter(sale_price < 2000, non_market ==1 )
model_log <- lm(log(sale_price) ~ log(market_value), data = hp_clean)
summary(model_log)
plot(hp_non_market$market_value,
hp_non_market$sale_price,
main = "Non-Market Sample: Market vs Sale Price",
xlab = "Market Value (USD)",
ylab = "Sale Price (USD)",
pch = 19, col = rgb(0.2, 0.4, 0.6, 0.5))
plot(model_log, which = 1)  # Residuals vs Fitted
library(lmtest)
bptest(model_log)
plot(model_log, which = 1)  # Residuals vs Fitted
library(lmtest)
bptest(model_log)
library(sandwich)
library(lmtest)
coeftest(model_log, vcov = vcovHC(model_log, type = "HC1"))
fml1 <- sale_price ~ total_livable_area + number_of_bedrooms + number_of_bathrooms + house_age
fml2 <- update(fml1, . ~ . + median_income + ba_rate + unemployment_rate)
fml3 <- update(fml2, . ~ . + crime_count + transit_count + recreation_count + nearest_hospital_m)
fml4 <- update(fml3, . ~ . + total_livable_area:house_age + factor(geographic_ward.y))
m1 <- train(fml1, data = model_data, method = "lm", trControl = cv_control)
model_data <- opa_census %>%
st_drop_geometry() %>%
dplyr::select(
sale_price, total_livable_area, number_of_bedrooms,
number_of_bathrooms, house_age,
median_income, ba_rate, unemployment_rate,
crime_count, transit_count, recreation_count,
nearest_hospital_m, geographic_ward.y
) %>%
filter(complete.cases(.))
results <- resamples(list(
Model1 = m1, Model2 = m2, Model3 = m3, Model4 = m4
))
model_data <- opa_census %>%
st_drop_geometry() %>%
dplyr::select(
sale_price, total_livable_area, number_of_bedrooms,
number_of_bathrooms, house_age,
median_income, ba_rate, unemployment_rate,
crime_count, transit_count, recreation_count,
nearest_hospital_m, geographic_ward.y
) %>%
filter(complete.cases(.))
model_data <- opa_census %>%
st_drop_geometry() %>%
dplyr::select(
sale_price, total_livable_area, number_of_bedrooms,
number_of_bathrooms, house_age,
median_income, ba_rate, unemployment_rate,
crime_count, transit_count, recreation_count,
nearest_hospital_m, geographic_ward.y...42
) %>%
filter(complete.cases(.))
set.seed(42)
cv_control <- trainControl(
method = "cv",
number = 10,
savePredictions = "final"
)
fml1 <- sale_price ~ total_livable_area + number_of_bedrooms + number_of_bathrooms + house_age
fml2 <- update(fml1, . ~ . + median_income + ba_rate + unemployment_rate)
fml3 <- update(fml2, . ~ . + crime_count + transit_count + recreation_count + nearest_hospital_m)
fml4 <- update(fml3, . ~ . + total_livable_area:house_age + factor(geographic_ward.y))
m1 <- train(fml1, data = model_data, method = "lm", trControl = cv_control)
m2 <- train(fml2, data = model_data, method = "lm", trControl = cv_control)
m3 <- train(fml3, data = model_data, method = "lm", trControl = cv_control)
m4 <- train(fml4, data = model_data, method = "lm", trControl = cv_control)
fml1 <- sale_price ~ total_livable_area + number_of_bedrooms + number_of_bathrooms + house_age
fml2 <- update(fml1, . ~ . + median_income + ba_rate + unemployment_rate)
fml3 <- update(fml2, . ~ . + crime_count + transit_count + recreation_count + nearest_hospital_m)
fml4 <- update(fml3, . ~ . + total_livable_area:house_age + factor(geographic_ward.y...42))
m1 <- train(fml1, data = model_data, method = "lm", trControl = cv_control)
m2 <- train(fml2, data = model_data, method = "lm", trControl = cv_control)
m3 <- train(fml3, data = model_data, method = "lm", trControl = cv_control)
m4 <- train(fml4, data = model_data, method = "lm", trControl = cv_control)
results <- resamples(list(
Model1 = m1, Model2 = m2, Model3 = m3, Model4 = m4
))
summary(results)
smearing_factor <- mean(exp(residuals(model4)))
pred_y_corrected <- exp(pred_log) * smearing_factor
pred_log <- predict(model_log, newdata = opa_census)
smearing_factor <- mean(exp(residuals(model4)))
pred_y_corrected <- exp(pred_log) * smearing_factor
pred_log <- predict(model_log, newdata = opa_census)
smearing_factor <- mean(exp(residuals(model4)))
pred_y_corrected <- exp(pred_log) * smearing_factor
rmse <- sqrt(mean((pred_y_corrected - opa_census$sale_price)^2))
mae  <- mean(abs(pred_y_corrected - opa_census$sale_price))
correlation <- cor(pred_y_corrected, opa_census$sale_price)
pred_log <- predict(model_log, newdata = opa_census)
smearing_factor <- mean(exp(residuals(model4)))
pred_y_corrected <- exp(pred_log) * smearing_factor
rmse <- sqrt(mean((pred_y_corrected - opa_census$sale_price)^2))
mae  <- mean(abs(pred_y_corrected - opa_census$sale_price))
correlation <- cor(pred_y_corrected, opa_census$sale_price)
pred_log <- predict(model_log, newdata = opa_census)
smearing_factor <- mean(exp(residuals(model4)))
pred_y_corrected <- exp(pred_log) * smearing_factor
rmse <- sqrt(mean((pred_y_corrected - opa_census$sale_price)^2))
mae  <- mean(abs(pred_y_corrected - opa_census$sale_price))
correlation <- cor(pred_y_corrected, opa_census$sale_price)
plot(opa_census$sale_price, pred_y_corrected,
xlab = "Actual Price", ylab = "Predicted Price",
main = "Predicted vs Actual Sale Price",
pch = 19, col = rgb(0.2,0.4,0.6,0.4))
abline(0,1,col="red",lwd=2)
pred_log <- predict(model_log, newdata = opa_census)
smearing_factor <- mean(exp(residuals(model4)))
pred_y_corrected <- exp(pred_log) * smearing_factor
rmse <- sqrt(mean((pred_y_corrected - opa_census$sale_price)^2))
mae  <- mean(abs(pred_y_corrected - opa_census$sale_price))
correlation <- cor(pred_y_corrected, opa_census$sale_price)
rmse
plot(opa_census$sale_price, pred_y_corrected,
xlab = "Actual Price", ylab = "Predicted Price",
main = "Predicted vs Actual Sale Price",
pch = 19, col = rgb(0.2,0.4,0.6,0.4))
abline(0,1,col="red",lwd=2)
pred_log <- predict(model_log, newdata = opa_census)
smearing_factor <- mean(exp(residuals(model4)))
pred_y_corrected <- exp(pred_log) * smearing_factor
rmse <- sqrt(mean((pred_y_corrected - opa_census$sale_price)^2))
mae  <- mean(abs(pred_y_corrected - opa_census$sale_price))
correlation <- cor(pred_y_corrected, opa_census$sale_price)
rmse
rmse_norm <- 359435.2 / mean(opa_census$sale_price)
rmse_norm
plot(opa_census$sale_price, pred_y_corrected,
xlab = "Actual Price", ylab = "Predicted Price",
main = "Predicted vs Actual Sale Price",
pch = 19, col = rgb(0.2,0.4,0.6,0.4))
abline(0,1,col="red",lwd=2)
pred_log <- predict(model4, newdata = opa_census)
smearing_factor <- mean(exp(residuals(model4)))
pred_y_corrected <- exp(pred_log) * smearing_factor
rmse <- sqrt(mean((pred_y_corrected - opa_census$sale_price)^2))
mae  <- mean(abs(pred_y_corrected - opa_census$sale_price))
correlation <- cor(pred_y_corrected, opa_census$sale_price)
rmse
rmse_norm <- 359435.2 / mean(opa_census$sale_price)
rmse_norm
plot(opa_census$sale_price, pred_y_corrected,
xlab = "Actual Price", ylab = "Predicted Price",
main = "Predicted vs Actual Sale Price",
pch = 19, col = rgb(0.2,0.4,0.6,0.4))
abline(0,1,col="red",lwd=2)
ward_boundaries <- st_transform(ward_boundaries, st_crs(opa_census))
opa_census <- st_join(opa_census, ward_boundaries %>% dplyr::select(geographic_ward), left = TRUE)
model4 <- lm(log(sale_price) ~ log(total_livable_area)  +
number_of_bathrooms + house_age +
log(median_income) + ba_rate + crime_count +
transit_count + nearest_hospital_m + factor(geographic_ward.y...42),
data = opa_census)
summary(model4)
opa_census$predicted <- predict(model4, newdata = opa_census)
opa_census$residual <- opa_census$sale_price - opa_census$predicted
opa_census %>%
filter(!is.na(residual)) %>%
ggplot() +
geom_sf(aes(fill = residual), color = NA) +
scale_fill_gradient2(low = "blue", mid = "white", high = "red") +
labs(
title = "Prediction Residuals (Model 4)",
fill = "Residual ($)"
) +
theme_minimal()
pred_log <- predict(model4, newdata = opa_census)
smearing_factor <- mean(exp(residuals(model4)))
pred_y_corrected <- exp(pred_log) * smearing_factor
rmse <- sqrt(mean((pred_y_corrected - opa_census$sale_price)^2))
mae  <- mean(abs(pred_y_corrected - opa_census$sale_price))
correlation <- cor(pred_y_corrected, opa_census$sale_price)
rmse
rmse_norm <- 359435.2 / mean(opa_census$sale_price)
rmse_norm
plot(opa_census$sale_price, pred_y_corrected,
xlab = "Actual Price", ylab = "Predicted Price",
main = "Predicted vs Actual Sale Price",
pch = 19, col = rgb(0.2,0.4,0.6,0.4))
abline(0,1,col="red",lwd=2)
View(model_log)
View(model_log)
pred_log <- predict(model4, newdata = opa_census)
smearing_factor <- mean(exp(residuals(model4)))
pred_y_corrected <- exp(pred_log) * smearing_factor
rmse <- sqrt(mean((pred_y_corrected - opa_census$sale_price)^2))
mae  <- mean(abs(pred_y_corrected - opa_census$sale_price))
correlation <- cor(pred_y_corrected, opa_census$sale_price)
sum(is.na(opa_census$sale_price))
rmse
rmse_norm <- 359435.2 / mean(opa_census$sale_price)
rmse_norm
plot(opa_census$sale_price, pred_y_corrected,
xlab = "Actual Price", ylab = "Predicted Price",
main = "Predicted vs Actual Sale Price",
pch = 19, col = rgb(0.2,0.4,0.6,0.4))
abline(0,1,col="red",lwd=2)
pred_log <- predict(model4, newdata = opa_census)
smearing_factor <- mean(exp(residuals(model4)))
pred_y_corrected <- exp(pred_log) * smearing_factor
rmse <- sqrt(mean((pred_y_corrected - opa_census$sale_price)^2))
mae  <- mean(abs(pred_y_corrected - opa_census$sale_price))
correlation <- cor(pred_y_corrected, opa_census$sale_price)
a=sum(is.na(opa_census$sale_price))
a
rmse
rmse_norm <- 359435.2 / mean(opa_census$sale_price)
rmse_norm
plot(opa_census$sale_price, pred_y_corrected,
xlab = "Actual Price", ylab = "Predicted Price",
main = "Predicted vs Actual Sale Price",
pch = 19, col = rgb(0.2,0.4,0.6,0.4))
abline(0,1,col="red",lwd=2)
pred_log <- predict(model4, newdata = opa_census)
smearing_factor <- mean(exp(residuals(model4)))
pred_y_corrected <- exp(pred_log) * smearing_factor
rmse <- sqrt(mean((pred_y_corrected - opa_census$sale_price)^2))
mae  <- mean(abs(pred_y_corrected - opa_census$sale_price))
correlation <- cor(pred_y_corrected, opa_census$sale_price)
a=sum(is.na(opa_census$sale_price))
a
rmse
rmse_norm <- 359435.2 / mean(opa_census$sale_price)
rmse_norm
plot(opa_census$sale_price, pred_y_corrected,
xlab = "Actual Price", ylab = "Predicted Price",
main = "Predicted vs Actual Sale Price",
pch = 19, col = rgb(0.2,0.4,0.6,0.4))
abline(0,1,col="red",lwd=2)
library(tibble)
library(gt)
install.packages("car")
library(car)
model_results <- tibble(
Model = c("Model 1", "Model 2", "Model 3", "Model 4"),
MAE = c(139645, 125333, 130631, 126322),
RMSE = c(348642, 344890, 341023, 326913),
R2 = c(0.304, 0.325, 0.341, 0.394)
)
model_results %>%
gt() %>%
fmt_number(columns = c(MAE, RMSE), decimals = 0) %>%
fmt_number(columns = R2, decimals = 3)
vif(model4)
vif(model4)
