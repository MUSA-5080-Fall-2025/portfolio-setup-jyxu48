# Load required packages (hint: you need tidycensus, tidyverse, and knitr)
library(tidyverse)
library(dplyr)
library(knitr)
library(tidycensus)
# Set your Census API key
census_api_key("fef2af5588030f3fd4b474bd111e0d63a7ec2837")
# Choose your state for analysis - assign it to a variable called my_state
my_state  <- "MN"
**State Selection:** I have chosen **[Minnesota]** for this analysis because: [Brief explanation of why you chose this state]
# Load required packages (hint: you need tidycensus, tidyverse, and knitr)
library(tidyverse)
library(dplyr)
library(knitr)
library(tidycensus)
# Set your Census API key
census_api_key("fef2af5588030f3fd4b474bd111e0d63a7ec2837")
# Choose your state for analysis - assign it to a variable called my_state
my_state  <- "MN"
# Write your get_acs() code here
county_data <- get_acs(
geography = "county",
state = my_state,
variables = c(
median_income = "B19013_001",   # Median Household Income
total_population = "B01003_001" # Total Population
),
year = 2022,
survey = "acs5",
output = "wide"
)
county_data
# Clean the county names to remove state name and "County"
# Hint: use mutate() with str_remove()
county_data_clean <- county_data %>%
mutate(
NAME = str_remove(NAME, ",.*"),         # remove state name after the comma
NAME = str_remove(NAME, " County$")     # remove trailing "County"
)
# Display the first few rows
head(county_data_clean)
# Write your get_acs() code here
county_data <- get_acs(
geography = "county",
state = my_state,
variables = c(
median_income = "B19013_001",   # Median Household Income
total_population = "B01003_001" # Total Population
),
year = 2022,
survey = "acs5",
output = "wide"
)
county_data
# Clean the county names to remove state name and "County"
# Hint: use mutate() with str_remove()
county_data_clean <- county_data %>%
mutate(
NAME = str_remove(NAME, ",.*"),         # remove state name after the comma
NAME = str_remove(NAME, " County$")     # remove trailing "County"
)
# Display the first few rows
head(county_data_clean)
# Create reliability categories
# Calculate MOE percentage and reliability categories using mutate()
county_data_clean <- county_data_clean %>%
mutate(MOE = (median_incomeM / median_incomeE) * 100)
county_data_clean <- county_data_clean %>%
mutate(reliability = case_when(
MOE < 5 ~ "High Confidence",
MOE >= 5 & MOE <= 10 ~ "Moderate Confidence",
MOE > 10 ~ "Low Confidence"
))
county_data_clean <- county_data_clean %>%
mutate(unreliable_flag = MOE > 10)
# Create a summary showing count of counties in each reliability category
reliability_summary <- county_data_clean %>%
count(reliability) %>%
mutate(percentage = (n / sum(n)) * 100)
reliability_summary
# Hint: use count() and mutate() to add percentages
# Create table of top 5 counties by MOE percentage
top5 <- county_data_clean %>%
arrange(desc(MOE)) %>%
slice(1:5) %>%
select(
County = NAME,
Median_Income = median_incomeE,
Margin_of_Error = median_incomeM,
MOE_Percentage = MOE,
Reliability = reliability
)
# Format as table with kable() - include appropriate column names and caption
kable(top5, caption = "Top 5 Counties with Highest MOE Percentage (Median Income)")
# Use filter() to select 2-3 counties from your county_reliability data
# Store the selected counties in a variable called selected_counties
high_conf <- county_reliability %>%
filter(reliability == "High Confidence") %>%
slice(1)
# Create reliability categories
# Calculate MOE percentage and reliability categories using mutate()
county_data_clean <- county_data_clean %>%
mutate(MOE = (median_incomeM / median_incomeE) * 100)
county_data_clean <- county_data_clean %>%
mutate(reliability = case_when(
MOE < 5 ~ "High Confidence",
MOE >= 5 & MOE <= 10 ~ "Moderate Confidence",
MOE > 10 ~ "Low Confidence"
))
county_data_clean <- county_data_clean %>%
mutate(unreliable_flag = MOE > 10)
county_data_clean
# Create a summary showing count of counties in each reliability category
reliability_summary <- county_data_clean %>%
count(reliability) %>%
mutate(percentage = (n / sum(n)) * 100)
reliability_summary
# Hint: use count() and mutate() to add percentages
# Use filter() to select 2-3 counties from your county_reliability data
# Store the selected counties in a variable called selected_counties
high_conf <- county_data_clean %>%
filter(reliability == "High Confidence") %>%
slice(1)
moderate_conf <- county_data_clean %>%
filter(reliability == "Moderate Confidence") %>%
slice(1)
low_conf <- county_data_clean %>%
filter(reliability == "Low Confidence") %>%
slice(1)
selected_counties <- bind_rows(high_conf, moderate_conf, low_conf)
selected_counties
# Display the selected counties with their key characteristics
# Show: county name, median income, MOE percentage, reliability category
# Use filter() to select 2-3 counties from your county_reliability data
# Store the selected counties in a variable called selected_counties
high_conf <- county_data_clean %>%
filter(reliability == "High Confidence") %>%
slice(1)
moderate_conf <- county_data_clean %>%
filter(reliability == "Moderate Confidence") %>%
slice(1)
low_conf <- county_data_clean %>%
filter(reliability == "Low Confidence") %>%
slice(1)
selected_counties <- bind_rows(high_conf, moderate_conf, low_conf)
# Display the selected counties with their key characteristics
# Show: county name, median income, MOE percentage, reliability category
selected_counties <- selected_counties %>%
select(NAME, median_incomeE, MOE, reliability)
# Use filter() to select 2-3 counties from your county_reliability data
# Store the selected counties in a variable called selected_counties
high_conf <- county_data_clean %>%
filter(reliability == "High Confidence") %>%
slice(1)
moderate_conf <- county_data_clean %>%
filter(reliability == "Moderate Confidence") %>%
slice(1)
low_conf <- county_data_clean %>%
filter(reliability == "Low Confidence") %>%
slice(1)
selected_counties <- bind_rows(high_conf, moderate_conf, low_conf)
# Display the selected counties with their key characteristics
# Show: county name, median income, MOE percentage, reliability category
selected_counties <- selected_counties %>%
select(NAME, median_incomeE, MOE, reliability)
selected_counties
# Define your race/ethnicity variables with descriptive names
race <- c(
white = "B03002_003",
black = "B03002_004",
hispanic = "B03002_012",
total_pop = "B03002_001"
)
# Use get_acs() to retrieve tract-level data
# Hint: You may need to specify county codes in the county parameter
tract_data <- get_acs(
geography = "tract",
state = "MN",
county = selected_county_codes,
variables = race,
year = 2022,
survey = "acs5",
output = "wide"
)
# Define your race/ethnicity variables with descriptive names
race <- c(
white = "B03002_003",
black = "B03002_004",
hispanic = "B03002_012",
total_pop = "B03002_001"
)
# Use get_acs() to retrieve tract-level data
# Hint: You may need to specify county codes in the county parameter
selected_county_codes <- c(
df %>%
select(GEOID))
# Define your race/ethnicity variables with descriptive names
race <- c(
white = "B03002_003",
black = "B03002_004",
hispanic = "B03002_012",
total_pop = "B03002_001"
)
# Use get_acs() to retrieve tract-level data
# Hint: You may need to specify county codes in the county parameter
selected_county_codes <- c(
selected_counties_allv %>%
select(GEOID))
# Define your race/ethnicity variables with descriptive names
race <- c(
white = "B03002_003",
black = "B03002_004",
hispanic = "B03002_012",
total_pop = "B03002_001"
)
# Use get_acs() to retrieve tract-level data
# Hint: You may need to specify county codes in the county parameter
selected_county_codes <- selected_counties_allv %>%
mutate(county_code = str_sub(GEOID, 1, 5)) %>%
pull(county_code)
# Use filter() to select 2-3 counties from your county_reliability data
# Store the selected counties in a variable called selected_counties
high_conf <- county_data_clean %>%
filter(reliability == "High Confidence") %>%
slice(1)
moderate_conf <- county_data_clean %>%
filter(reliability == "Moderate Confidence") %>%
slice(1)
low_conf <- county_data_clean %>%
filter(reliability == "Low Confidence") %>%
slice(1)
selected_counties_allv <- bind_rows(high_conf, moderate_conf, low_conf)
# Display the selected counties with their key characteristics
# Show: county name, median income, MOE percentage, reliability category
selected_counties <- selected_counties_allv %>%
select(NAME, median_incomeE, MOE, reliability)
selected_counties
# Define your race/ethnicity variables with descriptive names
race <- c(
white = "B03002_003",
black = "B03002_004",
hispanic = "B03002_012",
total_pop = "B03002_001"
)
# Use get_acs() to retrieve tract-level data
# Hint: You may need to specify county codes in the county parameter
selected_county_codes <- selected_counties_allv %>%
mutate(county_code = str_sub(GEOID, 1, 5)) %>%
pull(county_code)
tract_data <- get_acs(
geography = "tract",
state = "MN",
county = selected_county_codes,
variables = race,
year = 2022,
survey = "acs5",
output = "wide"
)
# Define your race/ethnicity variables with descriptive names
race <- c(
white = "B03002_003",
black = "B03002_004",
hispanic = "B03002_012",
total_pop = "B03002_001"
)
# Use get_acs() to retrieve tract-level data
# Hint: You may need to specify county codes in the county parameter
selected_county_codes <- selected_counties_allv %>%
mutate(county_code = str_sub(GEOID, 1, 5)) %>%
pull(county_code)
tract_data <- get_acs(
geography = "tract",
state = "27",
county = selected_county_codes,
variables = race,
year = 2022,
survey = "acs5",
output = "wide"
)
# Define your race/ethnicity variables with descriptive names
race <- c(
white = "B03002_003",
black = "B03002_004",
hispanic = "B03002_012",
total_pop = "B03002_001"
)
# Use get_acs() to retrieve tract-level data
# Hint: You may need to specify county codes in the county parameter
selected_county_codes <- selected_counties_allv %>%
pull(GEOID)
tract_data <- get_acs(
geography = "tract",
state = "27",
county = selected_county_codes,
variables = race,
year = 2022,
survey = "acs5",
output = "wide"
)
# Load required packages (hint: you need tidycensus, tidyverse, and knitr)
library(tidyverse)
library(dplyr)
library(knitr)
library(tidycensus)
# Set your Census API key
census_api_key("fef2af5588030f3fd4b474bd111e0d63a7ec2837")
# Choose your state for analysis - assign it to a variable called my_state
my_state  <- "MN"
# Define your race/ethnicity variables with descriptive names
race <- c(
white = "B03002_003",
black = "B03002_004",
hispanic = "B03002_012",
total_pop = "B03002_001"
)
# Use get_acs() to retrieve tract-level data
# Hint: You may need to specify county codes in the county parameter
selected_county_codes <- selected_counties_allv %>%
pull(GEOID)
tract_data <- get_acs(
geography = "tract",
state = "27",
county = selected_county_codes,
variables = race,
year = 2022,
survey = "acs5",
output = "wide"
)
# Load required packages (hint: you need tidycensus, tidyverse, and knitr)
library(tidyverse)
library(dplyr)
library(knitr)
library(tidycensus)
# Set your Census API key
census_api_key("fef2af5588030f3fd4b474bd111e0d63a7ec2837", install = TRUE)
# Choose your state for analysis - assign it to a variable called my_state
my_state  <- "MN"
# Define your race/ethnicity variables with descriptive names
race <- c(
white = "B03002_003",
black = "B03002_004",
hispanic = "B03002_012",
total_pop = "B03002_001"
)
# Use get_acs() to retrieve tract-level data
# Hint: You may need to specify county codes in the county parameter
selected_county_codes <- selected_counties_allv %>%
pull(GEOID)
tract_data <- get_acs(
geography = "tract",
state = "27",
county = selected_county_codes,
variables = race,
year = 2022,
survey = "acs5",
output = "wide"
)
# Define your race/ethnicity variables with descriptive names
race <- c(
white = "B03002_003",
black = "B03002_004",
hispanic = "B03002_012",
total_pop = "B03002_001"
)
# Use get_acs() to retrieve tract-level data
# Hint: You may need to specify county codes in the county parameter
selected_county_codes <- selected_counties_allv %>%
pull(GEOID)
tract_data <- get_acs(
geography = "tract",
state = "27",
county = selected_county_codes,
variables = race,
year = 2022,
survey = "acs5",
output = "wide"
)
# Define your race/ethnicity variables with descriptive names
race <- c(
white = "B03002_003",
black = "B03002_004",
hispanic = "B03002_012",
total_pop = "B03002_001"
)
# Use get_acs() to retrieve tract-level data
# Hint: You may need to specify county codes in the county parameter
selected_county_codes <- selected_counties_allv %>%
pull(GEOID)
tract_data2 <- get_acs(
geography = "tract",
state = "27",
county = selected_county_codes,
variables = race,
year = 2022,
survey = "acs5",
output = "wide"
)
# Write your get_acs() code here
county_data <- get_acs(
geography = "county",
state = my_state,
variables = c(
median_income = "B19013_001",   # Median Household Income
total_population = "B01003_001" # Total Population
),
year = 2022,
survey = "acs5",
output = "wide"
)
county_data
# Clean the county names to remove state name and "County"
# Hint: use mutate() with str_remove()
county_data_clean <- county_data %>%
mutate(
NAME = str_remove(NAME, ",.*"),         # remove state name after the comma
NAME = str_remove(NAME, " County$")     # remove trailing "County"
)
# Display the first few rows
head(county_data_clean)
# Write your get_acs() code here
county_data <- get_acs(
geography = "county",
state = my_state,
variables = c(
median_income = "B19013_001",   # Median Household Income
total_population = "B01003_001" # Total Population
),
year = 2022,
survey = "acs5",
output = "wide"
)
county_data
# Clean the county names to remove state name and "County"
# Hint: use mutate() with str_remove()
county_data_clean <- county_data %>%
mutate(
NAME = str_remove(NAME, ",.*"),         # remove state name after the comma
NAME = str_remove(NAME, " County$")     # remove trailing "County"
)
# Display the first few rows
head(county_data_clean)
# Write your get_acs() code here
county_data <- get_acs(
geography = "county",
state = my_state,
variables = c(
median_income = "B19013_001",   # Median Household Income
total_population = "B01003_001" # Total Population
),
year = 2022,
survey = "acs5",
output = "wide"
)
county_data
# Clean the county names to remove state name and "County"
# Hint: use mutate() with str_remove()
county_data_clean <- county_data %>%
mutate(
NAME = str_remove(NAME, ",.*"),         # remove state name after the comma
NAME = str_remove(NAME, " County$")     # remove trailing "County"
)
# Display the first few rows
head(county_data_clean)
# Write your get_acs() code here
county_data <- get_acs(
geography = "county",
state = my_state,
variables = c(
median_income = "B19013_001",   # Median Household Income
total_population = "B01003_001" # Total Population
),
year = 2022,
survey = "acs5",
output = "wide"
)
county_data
# Clean the county names to remove state name and "County"
# Hint: use mutate() with str_remove()
county_data_clean <- county_data %>%
mutate(
NAME = str_remove(NAME, ",.*"),         # remove state name after the comma
NAME = str_remove(NAME, " County$")     # remove trailing "County"
)
# Display the first few rows
head(county_data_clean)
# Load required packages (hint: you need tidycensus, tidyverse, and knitr)
library(tidyverse)
library(dplyr)
library(knitr)
library(tidycensus)
# Set your Census API key
census_api_key("fef2af5588030f3fd4b474bd111e0d63a7ec2837", install = TRUE)
# Define your race/ethnicity variables with descriptive names
race <- c(
white = "B03002_003",
black = "B03002_004",
hispanic = "B03002_012",
total_pop = "B03002_001"
)
# Use get_acs() to retrieve tract-level data
# Hint: You may need to specify county codes in the county parameter
selected_county_codes <- selected_counties_allv %>%
pull(GEOID)
tract_data2 <- get_acs(
geography = "tract",
state = "27",
county = selected_county_codes,
variables = race,
year = 2022,
survey = "acs5",
output = "wide"
)
